// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.subsystems.DriveSubsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveChase extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveSubsystem m_driveSubsystem;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public DriveChase(DriveSubsystem subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveSubsystem = subsystem;
        addRequirements(m_driveSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private NetworkTable table;
    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        table = NetworkTableInstance.getDefault().getTable("limelight-cybears");
    }

    private boolean hasTarget(){
        return table.getEntry("tv").getDouble(0) == 1;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // See if we have a target
        if (hasTarget()){
            SmartDashboard.putNumber("Limelight tx", table.getEntry("tx").getDouble(0));
            SmartDashboard.putNumber("Limelight ty", table.getEntry("ty").getDouble(0));
            SmartDashboard.putNumber("Limelight ta", table.getEntry("ta").getDouble(0));
            double limelightTX = table.getEntry("tx").getDouble(0);
            double limelightTA = table.getEntry("ta").getDouble(0);
            //System.out.println(limelightTX);
            
            // if(limelightTX < -1) {
            //     //System.out.println(limelightTX + "is small");
            //     m_driveSubsystem.driveWithValues(0, 0.7);
            // } else if(limelightTX > 1) {
            //     //System.out.println(limelightTX + "is big");
            //     m_driveSubsystem.driveWithValues(0, -0.7);
            // }else{
            //     m_driveSubsystem.driveWithValues(0, 0);
            // }
            // if(limelightTA < 5) {
            //     m_driveSubsystem.driveWithValues(-0.5, 0.0);
            // }else{
            //     m_driveSubsystem.driveWithValues(0, 0);
            // }


            if(limelightTX < -5 && limelightTA < 5) { 
                m_driveSubsystem.driveWithValues(-0.5, 0.6);
            } else if(limelightTX > 5 && limelightTA < 5) {
                m_driveSubsystem.driveWithValues(-0.5, -0.6);
            } else if(limelightTX < -5) {
                m_driveSubsystem.driveWithValues(0, 0.6);
            } else if(limelightTX > 5) {
                m_driveSubsystem.driveWithValues(0, -0.6);
            } else if(limelightTA < 5) {
                m_driveSubsystem.driveWithValues(-0.5, 0);
            } else {
                m_driveSubsystem.driveWithValues(0, 0);
            }
        }
        else{
            m_driveSubsystem.driveWithValues(0, 0);
        }
          
        }

        //m_driveSubsystem.driveWithValues(0, 0);
        // Determine screen offset to target
//12% for limleight ta
        // call drive command to turn to target

        
    
    

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
